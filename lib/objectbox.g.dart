// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/task_item_model.dart';
import 'model/task_model.dart';
import 'model/task_wallet_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(8, 3384631456236701407),
      name: 'TaskItemModel',
      lastPropertyId: const IdUid(6, 2587671709260092756),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8097700672630082482),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4066910620169614382),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2406393095850866044),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 215918315796023711),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2218299799904405406),
            name: 'purseModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 8722805300162651270),
            relationTarget: 'TaskModel'),
        ModelProperty(
            id: const IdUid(6, 2587671709260092756),
            name: 'isComplate',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 8631319927439322289),
      name: 'TaskModel',
      lastPropertyId: const IdUid(4, 8222205844025520355),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1194955126058467815),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8694302528466701024),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1416820592842954276),
            name: 'isPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8222205844025520355),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'taskItemModeList', srcEntity: 'TaskItemModel', srcField: ''),
        ModelBacklink(
            name: 'walletItemModelList',
            srcEntity: 'TaskWalletModel',
            srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 8421105496182716108),
      name: 'TaskWalletModel',
      lastPropertyId: const IdUid(7, 8771469178063738662),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 528853869398834691),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5738821819692029612),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3535292430780836024),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8400332267518730254),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8725804470761866614),
            name: 'isEarn',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5961110566567152125),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8771469178063738662),
            name: 'purseModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1814615643205521668),
            relationTarget: 'TaskModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 8421105496182716108),
      lastIndexId: const IdUid(7, 1814615643205521668),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1455357388498311168,
        4957292793021817069,
        3394224527457806634,
        3400914570734213658,
        3678541251274158689,
        3706870736486257014,
        3397960786933354245
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3653224095329835262,
        7234674809402926682,
        1763692120482085763,
        1655751687496057173,
        7778823785571122800,
        1760831474290650635,
        5363228516781935815,
        6923199240134127391,
        6982397979211076147,
        2374179703499176016,
        296714864621085003,
        834989330539108187,
        1497973310032039994,
        6758788825584425894,
        6357793312664201143,
        5520771063350099017,
        1216120449547274669,
        8357859503016141715,
        171855525075220383,
        1073830394817253035,
        8197782681600506724,
        5639209940952231123,
        4517006982766574662,
        6902841268025853583,
        8816042282995611262,
        7974965583899413664,
        7524955865921738060,
        7157655129927931290,
        5233034435125748919,
        4170133206209705418,
        9123002226305124195,
        2621577196403709092,
        739922679121145660,
        8504443783589649249,
        4617810644262576003,
        2046088102172829799,
        1028028479942638708,
        7589534508848118451,
        8437321342529978822
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TaskItemModel: EntityDefinition<TaskItemModel>(
        model: _entities[0],
        toOneRelations: (TaskItemModel object) => [object.purseModel],
        toManyRelations: (TaskItemModel object) => {},
        getId: (TaskItemModel object) => object.id,
        setId: (TaskItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskItemModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addInt64(4, object.purseModel.targetId);
          fbb.addBool(5, object.isComplate);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskItemModel(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              isComplate: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.purseModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.purseModel.attach(store);
          return object;
        }),
    TaskModel: EntityDefinition<TaskModel>(
        model: _entities[1],
        toOneRelations: (TaskModel object) => [],
        toManyRelations: (TaskModel object) => {
              RelInfo<TaskItemModel>.toOneBacklink(5, object.id,
                      (TaskItemModel srcObject) => srcObject.purseModel):
                  object.taskItemModeList,
              RelInfo<TaskWalletModel>.toOneBacklink(7, object.id,
                      (TaskWalletModel srcObject) => srcObject.purseModel):
                  object.walletItemModelList
            },
        getId: (TaskModel object) => object.id,
        setId: (TaskModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addBool(2, object.isPrice);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskModel(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isPrice:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.taskItemModeList,
              store,
              RelInfo<TaskItemModel>.toOneBacklink(5, object.id,
                  (TaskItemModel srcObject) => srcObject.purseModel),
              store.box<TaskModel>());
          InternalToManyAccess.setRelInfo(
              object.walletItemModelList,
              store,
              RelInfo<TaskWalletModel>.toOneBacklink(7, object.id,
                  (TaskWalletModel srcObject) => srcObject.purseModel),
              store.box<TaskModel>());
          return object;
        }),
    TaskWalletModel: EntityDefinition<TaskWalletModel>(
        model: _entities[2],
        toOneRelations: (TaskWalletModel object) => [object.purseModel],
        toManyRelations: (TaskWalletModel object) => {},
        getId: (TaskWalletModel object) => object.id,
        setId: (TaskWalletModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskWalletModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.amount);
          fbb.addBool(4, object.isEarn);
          fbb.addInt64(5, object.date.millisecondsSinceEpoch);
          fbb.addInt64(6, object.purseModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskWalletModel(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              amount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              isEarn: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.purseModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.purseModel.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TaskItemModel] entity fields to define ObjectBox queries.
class TaskItemModel_ {
  /// see [TaskItemModel.id]
  static final id =
      QueryIntegerProperty<TaskItemModel>(_entities[0].properties[0]);

  /// see [TaskItemModel.title]
  static final title =
      QueryStringProperty<TaskItemModel>(_entities[0].properties[1]);

  /// see [TaskItemModel.description]
  static final description =
      QueryStringProperty<TaskItemModel>(_entities[0].properties[2]);

  /// see [TaskItemModel.date]
  static final date =
      QueryIntegerProperty<TaskItemModel>(_entities[0].properties[3]);

  /// see [TaskItemModel.purseModel]
  static final purseModel =
      QueryRelationToOne<TaskItemModel, TaskModel>(_entities[0].properties[4]);

  /// see [TaskItemModel.isComplate]
  static final isComplate =
      QueryBooleanProperty<TaskItemModel>(_entities[0].properties[5]);
}

/// [TaskModel] entity fields to define ObjectBox queries.
class TaskModel_ {
  /// see [TaskModel.id]
  static final id = QueryIntegerProperty<TaskModel>(_entities[1].properties[0]);

  /// see [TaskModel.title]
  static final title =
      QueryStringProperty<TaskModel>(_entities[1].properties[1]);

  /// see [TaskModel.isPrice]
  static final isPrice =
      QueryBooleanProperty<TaskModel>(_entities[1].properties[2]);

  /// see [TaskModel.date]
  static final date =
      QueryIntegerProperty<TaskModel>(_entities[1].properties[3]);
}

/// [TaskWalletModel] entity fields to define ObjectBox queries.
class TaskWalletModel_ {
  /// see [TaskWalletModel.id]
  static final id =
      QueryIntegerProperty<TaskWalletModel>(_entities[2].properties[0]);

  /// see [TaskWalletModel.title]
  static final title =
      QueryStringProperty<TaskWalletModel>(_entities[2].properties[1]);

  /// see [TaskWalletModel.description]
  static final description =
      QueryStringProperty<TaskWalletModel>(_entities[2].properties[2]);

  /// see [TaskWalletModel.amount]
  static final amount =
      QueryDoubleProperty<TaskWalletModel>(_entities[2].properties[3]);

  /// see [TaskWalletModel.isEarn]
  static final isEarn =
      QueryBooleanProperty<TaskWalletModel>(_entities[2].properties[4]);

  /// see [TaskWalletModel.date]
  static final date =
      QueryIntegerProperty<TaskWalletModel>(_entities[2].properties[5]);

  /// see [TaskWalletModel.purseModel]
  static final purseModel = QueryRelationToOne<TaskWalletModel, TaskModel>(
      _entities[2].properties[6]);
}
